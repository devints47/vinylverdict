import { type NextRequest, NextResponse } from "next/server"
import { checkAuth } from "@/lib/env-check"

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const authResult = await checkAuth()
    if (!authResult.isAuthenticated) {
      console.error("Authentication failed in send email API")
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const body = await request.json()
    const { verdictText, assistantType } = body

    // Get user profile to get email
    const userResponse = await fetch(`${request.nextUrl.origin}/api/auth/me`, {
      headers: {
        cookie: request.headers.get("cookie") || "",
      },
    })

    if (!userResponse.ok) {
      return NextResponse.json({ error: "Could not get user profile" }, { status: 400 })
    }

    const userProfile = await userResponse.json()
    const userEmail = userProfile.email

    if (!userEmail) {
      return NextResponse.json({ error: "No email address found in your Spotify profile" }, { status: 400 })
    }

    // Get personality name
    const getPersonalityName = (type: string): string => {
      switch (type) {
        case "worshipper":
          return "The Taste Validator"
        case "historian":
          return "The Music Historian"
        case "snob":
        default:
          return "The Music Snob"
      }
    }

    const personalityName = getPersonalityName(assistantType)
    const username = userProfile.display_name || userProfile.id || "Music Lover"

    // Create email content
    const subject = `Your Music Taste Verdict from VinylVerdict.fm`
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Your Music Taste Verdict</title>
          <style>
            body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
              background-color: #f8f9fa;
            }
            .container {
              background-color: white;
              border-radius: 12px;
              padding: 30px;
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
              padding-bottom: 20px;
              border-bottom: 2px solid #c026d3;
            }
            .logo {
              font-size: 28px;
              font-weight: bold;
              color: #c026d3;
              margin-bottom: 10px;
            }
            .subtitle {
              color: #666;
              font-size: 16px;
            }
            .verdict-content {
              background-color: #f8f9fa;
              border-left: 4px solid #c026d3;
              padding: 20px;
              margin: 20px 0;
              border-radius: 0 8px 8px 0;
            }
            .verdict-content h1, .verdict-content h2, .verdict-content h3 {
              color: #c026d3;
              margin-top: 0;
            }
            .verdict-content p {
              margin-bottom: 15px;
            }
            .footer {
              text-align: center;
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #eee;
              color: #666;
              font-size: 14px;
            }
            .cta-button {
              display: inline-block;
              background-color: #c026d3;
              color: white;
              padding: 12px 24px;
              text-decoration: none;
              border-radius: 6px;
              font-weight: bold;
              margin: 20px 0;
            }
            .cta-button:hover {
              background-color: #a21caf;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <div class="logo">ðŸŽµ VinylVerdict.fm</div>
              <div class="subtitle">${personalityName}'s analysis of ${username}'s music taste</div>
            </div>
            
            <div class="verdict-content">
              ${convertMarkdownToHtml(verdictText)}
            </div>
            
            <div style="text-align: center;">
              <a href="${process.env.NEXT_PUBLIC_APP_URL || "https://vinylverdict.fm"}" class="cta-button">
                Get Another Verdict
              </a>
            </div>
            
            <div class="footer">
              <p>This verdict was generated by VinylVerdict.fm</p>
              <p>Share your results with friends and discover new music insights!</p>
            </div>
          </div>
        </body>
      </html>
    `

    // Convert markdown to HTML for email
    function convertMarkdownToHtml(markdown: string): string {
      return markdown
        .replace(/^# (.*$)/gm, "<h1>$1</h1>")
        .replace(/^## (.*$)/gm, "<h2>$1</h2>")
        .replace(/^### (.*$)/gm, "<h3>$1</h3>")
        .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
        .replace(/\*(.*?)\*/g, "<em>$1</em>")
        .replace(/\n\n/g, "</p><p>")
        .replace(/^- (.*$)/gm, "<li>$1</li>")
        .replace(/(<li>.*<\/li>)/s, "<ul>$1</ul>")
        .replace(/^(?!<[h|u|p])(.+)$/gm, "<p>$1</p>")
    }

    // For now, we'll simulate sending an email
    // In a real implementation, you'd use a service like Resend, SendGrid, or Nodemailer
    console.log(`Would send email to: ${userEmail}`)
    console.log(`Subject: ${subject}`)
    console.log(`Content length: ${htmlContent.length} characters`)

    // Simulate email sending delay
    await new Promise((resolve) => setTimeout(resolve, 1000))

    return NextResponse.json({
      success: true,
      message: `Verdict sent to ${userEmail}`,
      email: userEmail,
    })
  } catch (error: any) {
    console.error("Error sending verdict email:", error)
    return NextResponse.json({ error: "Failed to send email", details: error.message }, { status: 500 })
  }
}
